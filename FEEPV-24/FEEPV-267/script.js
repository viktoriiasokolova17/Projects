/* JavaScript Arrays*/

/**************************************************************************/
// Зберігайте кілька значень в одній змінній за допомогою масивів JavaScript
// За допомогою змінних JavaScript arrayми можемо зберігати кілька фрагментів даних в одному місці.

// Оголошення масиву починається з квадратної дужки, що відкривається, завершується квадратною дужкою, що закривається, і ставиться кома між кожним записом, як це:

// const sandwich = ["peanut butter", "jelly", "bread"];
// Змініть новий масив myArrayтак, щоб він містив і рядок, і число (у такому порядку).

// const myArray = ["AAAA", 11];

/**************************************************************************/
// Вкладіть один масив в інший масив
// Ви також можете вкладати масиви в інші масиви, як показано нижче:

// const teams = [["Bulls", 23], ["White Sox", 45]];
// Це також називається багатовимірним масивом .

// Створіть вкладений масив під назвою myArray.

// const myArray = [["aaa", 2], ["bbb", 4]];

/**************************************************************************/
// Доступ до даних масиву з індексами
// Ми можемо отримати доступ до даних всередині масивів за допомогою індексів .

// Індекси масиву записуються в тій самій нотації в дужках, що й рядки, за винятком того, що замість вказівки символу вони вказують запис у масиві. Як і рядки, масиви використовують індексацію від нуля , тому перший елемент у масиві має індекс 0.


// приклад

// const array = [50, 60, 70];
// console.log(array[0]);
// const data = array[1];
// Друкує і console.log(array[0])має значення .50data60

// Створіть викликану змінну myDataта встановіть для неї значення, що дорівнює першому значенню myArrayв дужках.

// const myArray = [50, 60, 70];

// const myData = myArray[0];

// console.log(myArray[1]);//60

/**************************************************************************/
// Змінити дані масиву за допомогою індексів
// На відміну від рядків, елементи масивів є змінними і можуть бути вільно змінені, навіть якщо масив було оголошено за допомогою const.

// приклад

// const ourArray = [50, 40, 30];
// ourArray[0] = 15;
// ourArrayтепер має значення [15, 40, 30].

// Примітка. Між назвою масиву та квадратними дужками не повинно бути пробілів, наприклад array [0]. Хоча JavaScript здатний обробляти це правильно, це може заплутати інших програмістів, які читатимуть ваш код.

// Змініть дані, що зберігаються за індексом 0, myArrayна значення 45.


// const myArray = [18, 64, 99];

// myArray[0] = 45;

// console.log(myArray); // [ 45, 64, 99 ]

/**************************************************************************/
// Доступ до багатовимірних масивів за допомогою індексів
// Один із способів уявлення про багатовимірний масив – як про масив масивів . Коли ви використовуєте дужки для доступу до свого масиву, перший набір дужок стосується записів у крайньому (першому рівні) масиву, а кожна додаткова пара дужок посилається на наступний рівень записів усередині.

// приклад

// const arr = [
//   [1, 2, 3],
//   [4, 5, 6],
//   [7, 8, 9],
//   [[10, 11, 12], 13, 14]
// ];

// const subarray = arr[3];
// const nestedSubarray = arr[3][0];
// const element = arr[3][0][1];
// У цьому прикладі subarrayмає значення [[10, 11, 12], 13, 14], nestedSubarrayмає значення [10, 11, 12]і elementмає значення 11.

// Примітка. Між назвою масиву та квадратними дужками не повинно бути жодних пробілів, наприклад array [0][0], і навіть це array [0] [0]неприпустимо. Хоча JavaScript здатний обробляти це правильно, це може заплутати інших програмістів, які читатимуть ваш код.

// Використовуючи позначення в дужках, виберіть такий елемент myArray, який myData дорівнює 8.

// const myArray = [
//     [1, 2, 3],
//     [4, 5, 6],
//     [7, 8, 9],
//     [[10, 11, 12], 13, 14],
//   ];
  
//   const myData = myArray[2][1];
  
//   console.log(myData); //8

/**************************************************************************/
// Маніпулювання масивами за допомогою методу push
// Простий спосіб додати дані в кінець масиву — за допомогою push()методу.

// Метод push()приймає один або кілька аргументів і додає їх у кінець масиву в тому порядку, в якому вони з’являються. Він повертає нову довжину масиву.

// приклади:

// const arr1 = [1, 2, 3];
// arr1.push(4, 5);

// const arr2 = ["Stimpson", "J", "cat"];
// arr2.push(["happy", "joy"]);
// arr1тепер має значення [1, 2, 3, 4, 5]і arr2має значення ["Stimpson", "J", "cat", ["happy", "joy"]].

// Натисніть ["dog", 3]на кінець змінної myArray.

// const myArray = [["John", 23], ["cat", 2]];

// myArray.push(["dog", 3]);

// console.log(myArray); ///[ [ 'John', 23 ], [ 'cat', 2 ], [ 'dog', 3 ] ]

/**************************************************************************/
// Маніпулювання масивами за допомогою методу pop
// Ще один спосіб змінити дані в масиві — за допомогою .pop()функції.

// .pop()використовується для висунення значення з кінця масиву. Ми можемо зберегти це висунуте значення, присвоївши його змінній. Іншими словами, .pop()видаляє останній елемент із масиву та повертає цей елемент.

// Будь-який тип запису можна витягти з масиву - числа, рядки, навіть вкладені масиви.

// const threeArr = [1, 4, 6];
// const oneDown = threeArr.pop();
// console.log(oneDown);
// console.log(threeArr);
// Перший console.logвідображатиме значення 6, а другий – значення [1, 4].

// Скористайтеся цією .pop()функцією, щоб видалити останній елемент із myArrayі призначити виведене значення новій змінній, removedFromMyArray.

// const myArray = [["John", 23], ["cat", 2]];

// const removedFromMyArray = myArray.pop();

// console.log(myArray); //[ [ 'John', 23 ] ]

/**************************************************************************/
// Маніпулювання масивами за допомогою методу shift
// pop()завжди видаляє останній елемент масиву. Що робити, якщо ви хочете видалити перший?

// Ось тут і .shift()вступає. Він працює так само, як .pop(), за винятком того, що видаляє перший елемент замість останнього.

// приклад:

// const ourArray = ["Stimpson", "J", ["cat"]];
// const removedFromOurArray = ourArray.shift();
// removedFromOurArrayмав би значення рядка Stimpson, і ourArrayмав би ["J", ["cat"]].

// Використовуйте цю .shift()функцію, щоб видалити перший елемент із myArrayі призначити значення «shifted off» новій змінній, removedFromMyArray.

// const myArray = [["John", 23], ["dog", 3]];

// const removedFromMyArray = myArray.shift();

// console.log(myArray); //[ [ 'dog', 3 ] ]

/**************************************************************************/

// Маніпулювання масивами за допомогою методу unshift
// Ви можете використовувати елементи не тільки shiftна початку масиву, але й unshiftна початку масиву, тобто додавати елементи перед масивом.

// .unshift()працює так само, як .push(), але замість додавання елемента в кінець масиву unshift()додає елемент на початку масиву.

// приклад:

// const ourArray = ["Stimpson", "J", "cat"];
// ourArray.shift();
// ourArray.unshift("Happy");
// Після shift, ourArrayмав би значення ["J", "cat"]. Після unshift, ourArrayмав би значення ["Happy", "J", "cat"].

// Додайте ["Paul", 35]до початку змінної myArrayза допомогою unshift().

// const myArray = [["John", 23], ["dog", 3]];
// myArray.shift();

// myArray.unshift(["Paul", 35]);

// console.log(myArray); //[ [ 'Paul', 35 ], [ 'dog', 3 ] ]

/**************************************************************************/

// Список покупок
// Створіть список покупок у змінній myList. Список має бути багатовимірним масивом, що містить кілька підмасивів.

// Перший елемент у кожному підмасиві повинен містити рядок із назвою елемента. Другим елементом має бути число, яке представляє кількість, тобто

// ["Chocolate Bar", 15]
// У списку має бути не менше 5 підмасивів.

// const myList = [
//     ["Chocolate Bar", 15],
//     ["Milk", 2],
//     ["Eggs", 12],
//     ["Bread", 1],
//     ["Apples", 6]
//   ];

/**************************************************************************/

// Доступ до вкладених масивів
// Як ми бачили в попередніх прикладах, об’єкти можуть містити як вкладені об’єкти, так і вкладені масиви. Подібно до доступу до вкладених об’єктів, нотацію в дужках масиву можна зв’язати для доступу до вкладених масивів.

// Ось приклад того, як отримати доступ до вкладеного масиву:

// const ourPets = [
//   {
//     animalType: "cat",
//     names: [
//       "Meowzer",
//       "Fluffy",
//       "Kit-Cat"
//     ]
//   },
//   {
//     animalType: "dog",
//     names: [
//       "Spot",
//       "Bowser",
//       "Frankie"
//     ]
//   }
// ];

// ourPets[0].names[1];
// ourPets[1].names[0];
// ourPets[0].names[1]був би рядок Fluffyі ourPets[1].names[0]був би рядок Spot.

// Використовуючи позначення з крапкою та дужками, установіть змінну secondTreeна другий елемент у listмасиві від другого об’єкта в myPlantsмасиві.



// const myPlants = [
//     {
//       type: "flowers",
//       list: [
//         "rose",
//         "tulip",
//         "dandelion"
//       ]
//     },
//     {
//       type: "trees",
//       list: [
//         "fir",
//         "pine",
//         "birch"
//       ]
//     }
//   ];
  
  
//   const secondTree = myPlants[1].list[1];
  
//   console.log(myPlants); //[ { type: 'flowers', list: [ 'rose', 'tulip', 'dandelion' ] }, { type: 'trees', list: [ 'fir', 'pine', 'birch' ] } ]
/**************************************************************************/



/* Basic Algorithm */
/**************************************************************************/

// Перетворіть градуси Цельсія у Фаренгейти
// Формула для перетворення градусів Цельсія у градуси Фаренгейта — це температура в градусах Цельсія 9/5плюс 32.

// Вам надається змінна, celsiusщо представляє температуру в градусах Цельсія. Використовуйте вже визначену змінну fahrenheitта призначте їй температуру за Фаренгейтом, еквівалентну даній температурі за Цельсієм. Використовуйте згадану вище формулу, щоб допомогти перетворити температуру за Цельсієм у Фаренгейт.


// function convertCtoF(celsius) {
//     let fahrenheit = (celsius * 9/5) + 32;
//     return fahrenheit;
//   }
  
//   convertCtoF(30);

//   console.log(convertCtoF(30)); //86


/**************************************************************************/

// Перевернути рядок
// Перевернути наданий рядок і повернути перевернутий рядок.

// Наприклад, "hello"має стати "olleh".

// function reverseString(str) {
//     return str.split('').reverse().join('');
//   }
  
//   console.log(reverseString("hello")); // olleh

/**************************************************************************/
// Розкладіть число на множники
// Повертає факторіал наданого цілого числа.

// Якщо ціле число представлено буквою n, факторіал є добутком усіх натуральних чисел, менших або рівних n.

// Факторіали часто представлені за допомогою скороченого позначенняn!

// Наприклад:5! = 1 * 2 * 3 * 4 * 5 = 120

// Функція надаватиме тільки цілі числа, більші або рівні нулю.

// function factorialize(num) {
//     let result = 1;
//     for (let i = 1; i <= num; i++) {
//       result *= i;
//     }
//     return result;
//   }
//    factorialize(5);
//   console.log(factorialize(5)); //120
  
/**************************************************************************/
// Знайди найдовше слово в рядку
// Поверніть довжину найдовшого слова у поданому реченні.

// Ваша відповідь має бути числом.

// function findLongestWordLength(str) {
//     let words = str.split(' '); // Розбиваємо рядок на масив слів
//     let longest = 0; // Початкова максимальна довжина
  
//     for (let i = 0; i < words.length; i++) {
//       if (words[i].length > longest) {
//         longest = words[i].length; // Оновлюємо найдовше слово
//       }
//     }
  
//     return longest;
//   }
  
//   console.log(findLongestWordLength("The quick brown fox jumped over the lazy dog")); //  6

/**************************************************************************/
// Повертає найбільші числа в масивах
// Повертає масив, що складається з найбільшого числа з кожного наданого підмасиву. Для простоти наданий масив міститиме рівно 4 підмасиви.

// Пам’ятайте, що ви можете перебирати масив за допомогою простого циклу for і отримувати доступ до кожного елемента за допомогою синтаксису масиву arr[i]

// function largestOfFour(arr) {
//     const result = [];
  
//     for (let i = 0; i < arr.length; i++) {
//       const largestNumber = Math.max(...arr[i]);
//       result.push(largestNumber);
//     }
  
//     return result;
//   }
  
//   console.log(largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]])); /// [ 5, 27, 39, 1001 ]
  
/**************************************************************************/
// Підтвердьте закінчення
// Перевірте, чи закінчується рядок (перший аргумент, str) заданим цільовим рядком (другий аргумент, target).

// Цю проблему можна вирішити за допомогою .endsWith()методу, який був представлений в ES2015. Але для цілей цього завдання ми б хотіли, щоб ви замість цього використовували один із методів підрядка JavaScript.

// function confirmEnding(str, target) {
//     return str.slice(-target.length) === target
//   }
  
//   confirmEnding("Bastian", "n");

/**************************************************************************/
// Повторити рядок
// Повторювати заданий рядок str(перший аргумент) кілька numразів (другий аргумент). Повертає порожній рядок, якщо numце не додатне число. Для цього завдання не використовуйте вбудований .repeat()метод.

// function repeatStringNumTimes(str, num) {
//     if (num < 1) {
//       return "";
//     } else {
//       return str + repeatStringNumTimes(str, num - 1);
//     }
//   }
  
//   repeatStringNumTimes("abc", 3);
//   console.log(repeatStringNumTimes("abc", 3));//abcabcabc

