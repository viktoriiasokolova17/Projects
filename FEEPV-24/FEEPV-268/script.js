// Отримати n-й елемент масиву
// Напишіть функцію, яка приймає масив (a) і значення (n) як аргумент. Повернути n-й елемент "a"
function myFunction (a, n){
 return a[n - 1]; 
}

console.log(myFunction([1,2,3,4,5],3)); //3
console.log(myFunction([10,9,8,7,6],5)); //6
console.log(myFunction([7,2,1,6,3],1)); //7

/////////////////////////////////////////////////////////////////////////////////////////////////
// Видалити перші n елементів масиву
// Напишіть функцію, яка приймає масив (a) як аргумент. Видаліть перші 3 елементи "а". Повернути результат

function myFunction(a) {
    return a.slice(3); 
}

console.log(myFunction([1, 2, 3, 4]));       // 4
console.log(myFunction([5, 4, 3, 2, 1, 0]));  // 2, 1, 0
console.log(myFunction([99, 1, 1]));         // 

/////////////////////////////////////////////////////////////////////////////////////////////////
// Отримати останні n елементів масиву
// Напишіть функцію, яка приймає масив (a) як аргумент. Витягніть останні 3 елементи "а". Повернути отриманий масив

function myFunction(a) {
    return a.slice(-3); 
}

console.log(myFunction([1, 2, 3, 4]));    // 2, 3, 4
console.log(myFunction([5, 4, 3, 2, 1, 0]));    // 2, 1, 0
console.log(myFunction([99, 1, 1]));     // 99, 1, 1

/////////////////////////////////////////////////////////////////////////////////////////////////
// Отримати перші n елементів масиву
// Напишіть функцію, яка приймає масив (a) як аргумент. Витягніть перші 3 елементи a. Повернути отриманий масив

function myFunction(a) {
    return a.slice(0, 3);  
}

console.log(myFunction([1, 2, 3, 4]));           // 1, 2, 3
console.log(myFunction([5, 4, 3, 2, 1, 0]));     // 5, 4, 3
console.log(myFunction([99, 1, 1]));              // 99, 1, 1

/////////////////////////////////////////////////////////////////////////////////////////////////
// Видалити певний елемент масиву
// Напишіть функцію, яка приймає масив (a) і значення (b) як аргумент. 
// Функція має видалити з масиву всі елементи, що дорівнюють "b".
//  Повернути відфільтрований масив

function myFunction(a, b) {
    return a.filter(element => element !== b);  
}

console.log(myFunction([1, 2, 3], 2));   // 1, 3
console.log(myFunction([1, 2, '2'], '2'));    // 1, 2
console.log(myFunction([false, '2', 1], false)); // '2', 1
console.log(myFunction([1, 2, '2', 1], 1));   // 2, '2'

/////////////////////////////////////////////////////////////////////////////////////////////////
// Підрахувати кількість елементів у масиві JavaScript
// Напишіть функцію, яка приймає масив (a) як аргумент. Повертає кількість елементів у a

function myFunction(a) {
    return a.length;  
}

console.log(myFunction([1, 2, 2, 4]));  // 4
console.log(myFunction([9, 9, 9]));     //  3
console.log(myFunction([4, 3, 2, 1, 0])); // 5

/////////////////////////////////////////////////////////////////////////////////////////////////
// Підрахувати кількість негативних значень у масиві
// Напишіть функцію, яка приймає масив чисел як аргумент. Повертає кількість від’ємних значень у масиві

function myFunction(a) {
    return a.filter(element => element < 0).length;  
}

console.log(myFunction([1, -2, 2, -4]));   // 2
console.log(myFunction([0, 9, 1]));    // 0
console.log(myFunction([4, -3, 2, 1, 0])); // 1

/////////////////////////////////////////////////////////////////////////////////////////////////
// Сортування масиву рядків за алфавітом
// Напишіть функцію, яка приймає масив рядків як аргумент. 
// Відсортуйте елементи масиву за алфавітом. Повернути результат.

function myFunction(arr) {
    return arr.sort(); 
}

console.log(myFunction(['b', 'c', 'd', 'a']));           // 'a', 'b', 'c', 'd'
console.log(myFunction(['z', 'c', 'd', 'a', 'y', 'a', 'w']));  // 'a', 'a', 'c', 'd', 'w', 'y', 'z'

/////////////////////////////////////////////////////////////////////////////////////////////////
// Відсортувати масив чисел у порядку спадання
// Напишіть функцію, яка приймає масив чисел як аргумент. 
// Він повинен повернути масив із числами, відсортованими в порядку спадання.

function myFunction(arr) {
    return arr.sort((a, b) => b - a);  
}

console.log(myFunction([1, 3, 2]));     // 3, 2, 1
console.log(myFunction([4, 2, 3, 1]));     // 4, 3, 2, 1

/////////////////////////////////////////////////////////////////////////////////////////////////
// Обчислити суму масиву чисел
// Напишіть функцію, яка приймає масив чисел як аргумент. Він повинен повертати суму чисел

function myFunction(a) {
    return a.reduce((sum, current) => sum + current, 0);  
}

console.log(myFunction([10, 100, 40]));     //  150
console.log(myFunction([10, 100, 1000, 1]));   // 1111
console.log(myFunction([-50, 0, 50, 200]));      //200

/////////////////////////////////////////////////////////////////////////////////////////////////
// Повертає середнє значення масиву чисел
// Напишіть функцію, яка приймає масив чисел як аргумент. Він має повернути середнє значення чисел.

function myFunction(arr) {
    return arr.reduce((sum, current) => sum + current) / arr.length;
}

console.log(myFunction([10, 100, 40]));   // 50
console.log(myFunction([10, 100, 1000]));   // 370
console.log(myFunction([-50, 0, 50, 200])); // 50

/////////////////////////////////////////////////////////////////////////////////////////////////
// Повертає найдовший рядок із масиву рядків
// Напишіть функцію, яка приймає масив рядків як аргумент. Повернути найдовший рядок.

function myFunction(arr) {
    return arr.reduce((a, b) => a.length >= b.length ? a : b);
}

console.log(myFunction(['help', 'me']));     // help
console.log(myFunction(['I', 'need', 'candy']));  // candy

/////////////////////////////////////////////////////////////////////////////////////////////////
// Перевірте, чи всі елементи масиву рівні
// Напишіть функцію, яка приймає масив як аргумент. Він повинен повернути істину, якщо всі елементи в масиві рівні.
//  В іншому випадку він повинен повернути false.

function myFunction(arr) {
    return arr.every(item => item === arr[0]);
}

console.log(myFunction([true, true, true, true]));     // true
console.log(myFunction(['test', 'test', 'test']));        // true
console.log(myFunction([1, 1, 1, 2]));            // false
console.log(myFunction(['10', 10, 10, 10]));           // false

/////////////////////////////////////////////////////////////////////////////////////////////////
// Об’єднати довільну кількість масивів
// Напишіть функцію, яка приймає аргументи довільної кількості масивів.
//  Він повинен повернути масив, що містить значення всіх масивів.

function myFunction(...arrays) {
    return [].concat(...arrays);
}
console.log(myFunction([1, 2, 3], [4, 5, 6]));   // 1, 2, 3, 4, 5, 6
console.log(myFunction(['a', 'b', 'c'], [4, 5, 6]));     // 'a', 'b', 'c', 4, 5, 6
console.log(myFunction([true, true], [1, 2], ['a', 'b']));   // true, true, 1, 2, 'a', 'b

/////////////////////////////////////////////////////////////////////////////////////////////////
// Сортувати масив за властивістю об’єкта
// Напишіть функцію, яка приймає масив об’єктів як аргумент. 
// Відсортуйте масив за властивістю b у порядку зростання. Повернути відсортований масив

function myFunction(arr) {
    const sort = (x, y) => x.b - y.b;
    return arr.sort(sort);
}

console.log(myFunction([{a:1,b:2},{a:5,b:4}])); // {a:1,b:2},{a:5,b:4}
console.log(myFunction([{a:2,b:10},{a:5,b:4}])); // {a:5,b:4},{a:2,b:10}
console.log(myFunction([{a:1,b:7},{a:2,b:1}]));  // {a:2,b:1},{a:1,b:7}

/////////////////////////////////////////////////////////////////////////////////////////////////
// Об’єднайте два масиви з повторюваними значеннями
// Напишіть функцію, яка приймає два масиви як аргументи. 
// Об’єднайте обидва масиви та видаліть повторювані значення. 
// Відсортуйте результат злиття в порядку зростання. Повернути отриманий масив

function myFunction(a, b) {
    return [...new Set([...a, ...b])].sort((x, y) => x - y);
}

console.log(myFunction([1, 2, 3], [3, 4, 5])); // 1, 2, 3, 4, 5 
console.log(myFunction([-10, 22, 333, 42], [-11, 5, 22, 41, 42])); // -11, -10, 5, 22, 41, 42, 333 

